#!/usr/bin/env ruby
# frozen_string_literal: true

require 'thor'
require 'fileutils'
require 'English'

class NetsoftCircle < Thor # :nodoc:
  desc 'setup', 'Setup Heroku for deployment'
  def setup
    File.open("#{ENV['HOME']}/.netrc", 'a+') do |file|
      file << <<~CONFIG

        machine api.heroku.com
          login #{ENV['HEROKU_LOGIN']}
          password #{ENV['HEROKU_API_KEY']}
        machine git.heroku.com
          login #{ENV['HEROKU_LOGIN']}
          password #{ENV['HEROKU_API_KEY']}
      CONFIG
    end

    Dir.mkdir("#{ENV['HOME']}/.ssh") unless Dir.exist?("#{ENV['HOME']}/.ssh")
    File.open("#{ENV['HOME']}/.ssh/config", 'a+') do |file|
      file << <<~CONFIG

        VerifyHostKeyDNS yes
        StrictHostKeyChecking no
      CONFIG
    end

    system('git config --global url."https://git.heroku.com/".insteadOf heroku:')
    exit(1) unless $CHILD_STATUS.success?
  end

  desc 'merge', 'Merges several simplecov json result files'
  option :output, type: :string, aliases: '-o', desc: 'Specify an alternate output directory for the produced coverage data'
  def merge(*files)
    require 'simplecov'
    return if files.empty?

    results = []

    files.each do |file|
      json = JSON.parse(File.read(file))
      json.each do |command_name, data|
        result = SimpleCov::Result.from_hash(command_name => data)
        results << result
      end
    end

    merged_result = SimpleCov::ResultMerger.merge_results(*results)
    SimpleCov.coverage_dir options[:output] unless options[:output].nil?
    SimpleCov::Formatter::HTMLFormatter.new.format(merged_result)
  end

  desc 'rspec', 'Run rspec'
  def rspec
    system <<~COMMAND
      bundle _${BUNDLE_VERSION}_ exec rspec \
        --color \
        --format RspecJunitFormatter \
        --out $CIRCLE_TEST_REPORTS/rspec/junit.xml \
        --format html \
        --out $CIRCLE_ARTIFACTS/rspec.html \
        --format progress \
        $(circleci tests glob "spec/**/*_spec.rb" | circleci tests split --split-by=timings)
    COMMAND
    exit(1) unless $CHILD_STATUS.success?
  end

  desc 'rubocop', 'Run rubocop'
  def rubocop
    system <<~COMMAND
      bundle _${BUNDLE_VERSION}_ exec rubocop \
        --parallel \
        --format progress \
        --format html \
        --out $CIRCLE_ARTIFACTS/rubocop/report.html
    COMMAND
    exit(1) unless $CHILD_STATUS.success?
  end

  desc 'docs', 'Build and deploy docs'
  method_option :branch, default: 'master', banner: '<docs branch name>', desc: 'The branch to fetch the docs repo from.'
  def docs
    system <<~SCRIPT
      #!/bin/bash
      git clone -b #{branch} https://$GITHUB_AUTH_TOKEN@github.com/NetsoftHoldings/hubstaff-docs.git ~/hubstaff-docs
      [ "$?" -eq "0" ] && exit 1
      docker run -u $(id -u) \
                 --env GIT_CREDENTIALS=https://$GITHUB_AUTH_TOKEN@github.com \
                 -v ~/hubstaff-docs:/antora:Z \
                 --rm -t antora/antora \
                 site.yml
      [ ! -d ~/hubstaff-docs/build/site ] && exit 1
      docker run --env AWS_DEFAULT_REGION=$AWS_DEFAULT_REGION \
                 --env AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY \
                 --env AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID \
                -v ~/hubstaff-docs/build/site:/docs \
                --rm -t \
                amazon/aws-cli s3 sync /docs s3://$AWS_S3_BUCKET --delete
    SCRIPT
  end

  def self.exit_on_failure?
    true
  end
end

NetsoftCircle.start
